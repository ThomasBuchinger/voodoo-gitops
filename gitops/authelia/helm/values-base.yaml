---
## @formatter:off
## values.local.yaml
##
## Repository: authelia https://charts.authelia.com
## Chart: authelia
##
## This values file is designed for a StatefulSet deployment with a single pod. It is not intended for production environments
## It uses the following providers:
##   - authentication: file (yaml)
##   - storage: local (SQLite3)
##   - session: memory
##   - notification: filesystem (yaml)

image:
  registry: ghcr.io
  repository: authelia/authelia

rbac:
  enabled: true
  serviceAccountName: authelia

domain: buc.sh
service:
  annotations: {}
  labels: {}
  port: 80

ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod-cloudflare-dns
  labels: {}
  subdomain: auth
  tls:
    enabled: true
    secret: cert-auth-buc-sh
pod:
  # Must be Deployment, DaemonSet, or StatefulSet.
  kind: Deployment
  annotations: {}
  labels: {}
  replicas: 1
  securityContext:
    container: {}
    pod: {}
  env: []
  # env:
  # - name: TZ
  #   value: Australia/Melbourne

  resources:
    limits: {}
    # limits:
    #   cpu: "4.00"
    #   memory: 125Mi
    requests:
      cpu: "0.25"
      memory: 50Mi

  extraVolumeMounts:
  - name: user-database-replaced
    mountPath: "/users"
    readOnly: true
  extraVolumes:
  - name: user-database-configmap
    secret:
      secretName: authelia-users
  - name: user-database-replaced
    emptyDir: {}

##
## Authelia Config Map Generator
##
configMap:
  enabled: true
  server:
    port: 9091
    ## Customize Authelia headers.
    headers:
      ## Read the Authelia docs before setting this advanced option.
      ## https://www.authelia.com/configuration/miscellaneous/server/#csp_template.
      csp_template: ""

  log:
    ## Level of verbosity for logs: info, debug, trace.
    level: info
    format: text
  telemetry:
    metrics:
      enabled: true
      port: 9959
  default_redirection_url: "https://dashboard.buc.sh"
  
  ## Options are totp, webauthn, mobile_push.
  default_2fa_method: ""
  theme: light
  totp:
    disable: false
    ## The issuer name displayed in the Authenticator application of your choice.
    ## Defaults to <domain>.
    issuer: ""
    algorithm: sha1
    digits: 6
    period: 30
    skew: 1
    secret_size: 32
  webauthn:
    disable: false
    timeout: 60s
    display_name: Authelia
    attestation_conveyance_preference: indirect
    user_verification: preferred
  ntp:
    address: "time.cloudflare.com:123"
    version: 4
    max_desync: 3s
    disable_startup_check: false
    disable_failure: false
  duo_api:
    enabled: false

  authentication_backend:
    password_reset:
      disable: true
    ldap:
      enabled: false

    file:
      enabled: true
      path: /users/users_database.yaml
      watch: true
      search:
        email: false
        case_insensitive: false
  password_policy:
    standard:
      enabled: false
    ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
    zxcvbn:
      enabled: false
      min_score: 0
  session:
    name: authelia_session
    same_site: lax
    expiration: 1h
    inactivity: 5m

    ## The remember me duration.
    ## Value is in seconds, or duration notation. Value of 0 disables remember me.
    ## See: https://www.authelia.com/configuration/prologue/common/#duration-notation-format
    ## Longer periods are considered less secure because a stolen cookie will last longer giving attackers more time to
    ## spy or attack. Currently the default is 1M or 1 month.
    remember_me_duration: 1M

    redis:
      enabled: false

  regulation:
    ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
    max_retries: 10
    find_time: 2m
    ban_time: 5m


  storage:
    local:
      enabled: true
      path: /config/db.sqlite3
    mysql:
      enabled: false
    postgres:
      enabled: false

  notifier:
    disable_startup_check: false
    filesystem:
      enabled: true
      filename: /config/notification.txt
    smtp:
      enabled: false
      
##
## Authelia Secret Generator.
##
## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
##
secret:
  existingSecret: ""
  annotations: {}
  labels: {}

  ## Secrets.
  jwt:
    key: JWT_TOKEN
    value: ""
    filename: JWT_TOKEN
  ldap:
    key: LDAP_PASSWORD
    value: ""
    filename: LDAP_PASSWORD
  storage:
    key: STORAGE_PASSWORD
    value: ""
    filename: STORAGE_PASSWORD
  storageEncryptionKey:
    key: STORAGE_ENCRYPTION_KEY
    value: ""
    filename: STORAGE_ENCRYPTION_KEY
  session:
    key: SESSION_ENCRYPTION_KEY
    value: ""
    filename: SESSION_ENCRYPTION_KEY
  duo:
    key: DUO_API_KEY
    value: ""
    filename: DUO_API_KEY
  redis:
    key: REDIS_PASSWORD
    value: ""
    filename: REDIS_PASSWORD
  redisSentinel:
    key: REDIS_SENTINEL_PASSWORD
    value: ""
    filename: REDIS_SENTINEL_PASSWORD
  smtp:
    key: SMTP_PASSWORD
    value: ""
    filename: SMTP_PASSWORD
  oidcPrivateKey:
    key: OIDC_PRIVATE_KEY
    value: ""
    filename: OIDC_PRIVATE_KEY
  oidcHMACSecret:
    key: OIDC_HMAC_SECRET
    value: ""
    filename: OIDC_HMAC_SECRET

  ## HashiCorp Vault Injector configuration.

certificates:
  existingSecret: ""
  annotations: {}
  labels: {}
  values: []
  # values:
  # - name: Example_Com_Root_Certificate_Authority_B64.pem
  #   secretValue: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURYekNDQWtlZ0F3SUJBZ0lMQkFBQUFBQUJJVmhUQ0tJd0RRWUpLb1pJaHZjTkFRRUxCUUF3VERFZ01CNEcKQTFVRUN4TVhSMnh2WW1Gc1UybG5iaUJTYjI5MElFTkJJQzBnVWpNeEV6QVJCZ05WQkFvVENrZHNiMkpoYkZOcApaMjR4RXpBUkJnTlZCQU1UQ2tkc2IySmhiRk5wWjI0d0hoY05NRGt3TXpFNE1UQXdNREF3V2hjTk1qa3dNekU0Ck1UQXdNREF3V2pCTU1TQXdIZ1lEVlFRTEV4ZEhiRzlpWVd4VGFXZHVJRkp2YjNRZ1EwRWdMU0JTTXpFVE1CRUcKQTFVRUNoTUtSMnh2WW1Gc1UybG5iakVUTUJFR0ExVUVBeE1LUjJ4dlltRnNVMmxuYmpDQ0FTSXdEUVlKS29aSQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU13bGRwQjVCbmdpRnZYQWc3YUV5aWllL1FWMkVjV3RpSEw4ClJnSkR4N0tLblFSZkpNc3VTK0ZnZ2tiaFVxc01nVWR3Yk4xazBldjFMS01QZ2owTUs2NlgxN1lVaGhCNXV6c1QKZ0hlTUNPRkowbXBpTHg5ZStwWm8zNGtubFRpZkJ0Yyt5Y3NtV1ExejNyREk2U1lPZ3hYRzcxdUwwZ1JneWttbQpLUFpwTy9iTHlDaVI1WjJLWVZjM3JIUVUzSFRnT3U1eUx5NmMrOUM3di9VOUFPRUdNK2lDSzY1VHBqb1djNHpkClFRNGdPc0MwcDZIcHNrK1FMakpnNlZmTHVRU1NhR2psT0NaZ2RiS2ZkLytSRk8rdUlFbjhyVUFWU05FQ01XRVoKWHJpWDc2MTN0MlNhZXI5ZndSUHZtMkw3RFd6Z1ZHa1dxUVBhYnVtRGszRjJ4bW1GZ2hjQ0F3RUFBYU5DTUVBdwpEZ1lEVlIwUEFRSC9CQVFEQWdFR01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJL3dTMytvCkxrVWtyazFRK21PYWk5N2kzUnU4TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCTFFOdkFVS3IreUF6djk1WlUKUlVtN2xnQUpRYXl6RTRhR0tBY3p5bXZtZExtNkFDMnVwQXJUOWZIeEQ0cS9jMmRLZzhkRWUzamdyMjVzYndNcApqak01UmNPTzVMbFhiS3I4RXBic1U4WXQ1Q1JzdVpSais5eFRhR2RXUG9PNHp6VWh3OGxvL3M3YXdsT3F6SkNLCjZmQmRSb3lWM1hwWUtCb3ZIZDdOQURkQmorMUViZGRUS0pkKzgyY0VIaFhYaXBhMDA5NU1KNlJNRzNOemR2UVgKbWNJZmVnN2pMUWl0Q2h3cy96eXJWUTRQa1g0MjY4TlhTYjdoTGkxOFlJdkRRVkVUSTUzTzl6SnJsQUdvbWVjcwpNeDg2T3lYU2hrRE9PeXlHZU1saEx4UzY3dHRWYjkrRTdnVUpUYjBvMkhMTzAySlFaUjdya3BlRE1kbXp0Y3BICldEOWYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  # - name: Example_Com_Root_Certificate_Authority.pem
  #   value: |
  #     -----BEGIN CERTIFICATE-----
  #     MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
  #     A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
  #     Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
  #     MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
  #     A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
  #     hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
  #     RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
  #     gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
  #     KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
  #     QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
  #     XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
  #     DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
  #     LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
  #     RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
  #     jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
  #     6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
  #     mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
  #     Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
  #     WD9f
  #     -----END CERTIFICATE-----

##
## Authelia Persistence Configuration.
##
## Useful in scenarios where you need persistent storage.
## Auth Provider Use Case: file; we recommend you use the ldap provider instead.
## Storage Provider Use Case: local; we recommend you use the mysql/mariadb or postgres provider instead.
## Configuration Use Case: when you want to manually configure the configuration entirely (set configMap.enabled = false).
##
persistence:
  enabled: false
  annotations: {}
  labels: {}
  readOnly: false
  subPath: ""
  existingClaim: ""
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 100Mi
  selector: {}
